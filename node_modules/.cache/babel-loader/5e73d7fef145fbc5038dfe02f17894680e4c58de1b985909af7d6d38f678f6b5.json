{"ast":null,"code":"// src/utils/dragAndDrop.js\n\nexport const onDragEnd = (result, data, setData) => {\n  const {\n    destination,\n    source,\n    draggableId,\n    type\n  } = result;\n  if (!destination) {\n    console.log(\"destination is null\");\n    return;\n  }\n  if (String(destination.droppableId) === String(source.droppableId) && destination.index === source.index) {\n    console.log(\"same droppable and index\");\n    return;\n  }\n  if (type === 'list') {\n    console.log(\"type is list\");\n    const newListOrder = Array.from(data.lists);\n    const [movedList] = newListOrder.splice(source.index, 1);\n    newListOrder.splice(destination.index, 0, movedList);\n    setData({\n      ...data,\n      lists: newListOrder\n    });\n    return;\n  }\n  const startList = data.lists.find(list => String(list.id) === String(source.droppableId));\n  const finishList = data.lists.find(list => String(list.id) === String(destination.droppableId));\n  if (!startList || !finishList) {\n    console.error(\"Не найден startList или finishList!\");\n    return;\n  }\n  if (startList === finishList) {\n    console.log(\"startList === finishList\");\n    const newCards = Array.from(startList.cards);\n    const [movedCard] = newCards.splice(source.index, 1);\n    newCards.splice(destination.index, 0, movedCard);\n    const newList = {\n      ...startList,\n      cards: newCards\n    };\n    const newData = {\n      ...data,\n      lists: data.lists.map(list => String(list.id) === String(newList.id) ? newList : list)\n    };\n    setData(newData);\n    return;\n  }\n  console.log(\"Moving between lists\");\n  const startCards = Array.from(startList.cards);\n  const [movedCard] = startCards.splice(source.index, 1);\n  const finishCards = Array.from(finishList.cards);\n  finishCards.splice(destination.index, 0, movedCard);\n  const newStartList = {\n    ...startList,\n    cards: startCards\n  };\n  const newFinishList = {\n    ...finishList,\n    cards: finishCards\n  };\n  const newData = {\n    ...data,\n    lists: data.lists.map(list => {\n      if (String(list.id) === String(newStartList.id)) {\n        return newStartList;\n      }\n      if (String(list.id) === String(newFinishList.id)) {\n        return newFinishList;\n      }\n      return list;\n    })\n  };\n  setData(newData);\n};","map":{"version":3,"names":["onDragEnd","result","data","setData","destination","source","draggableId","type","console","log","String","droppableId","index","newListOrder","Array","from","lists","movedList","splice","startList","find","list","id","finishList","error","newCards","cards","movedCard","newList","newData","map","startCards","finishCards","newStartList","newFinishList"],"sources":["C:/Users/zulda/Desktop/1/src/utils/dragAndDrop.js"],"sourcesContent":["// src/utils/dragAndDrop.js\r\n\r\nexport const onDragEnd = (result, data, setData) => {\r\n    const { destination, source, draggableId, type } = result;\r\n  \r\n    if (!destination) {\r\n      console.log(\"destination is null\");\r\n      return;\r\n    }\r\n  \r\n    if (\r\n      String(destination.droppableId) === String(source.droppableId) &&\r\n      destination.index === source.index\r\n    ) {\r\n      console.log(\"same droppable and index\");\r\n      return;\r\n    }\r\n  \r\n    if (type === 'list') {\r\n      console.log(\"type is list\");\r\n      const newListOrder = Array.from(data.lists);\r\n      const [movedList] = newListOrder.splice(source.index, 1);\r\n      newListOrder.splice(destination.index, 0, movedList);\r\n  \r\n      setData({ ...data, lists: newListOrder });\r\n      return;\r\n    }\r\n  \r\n    const startList = data.lists.find(\r\n      (list) => String(list.id) === String(source.droppableId)\r\n    );\r\n    const finishList = data.lists.find(\r\n      (list) => String(list.id) === String(destination.droppableId)\r\n    );\r\n  \r\n    if (!startList || !finishList) {\r\n      console.error(\"Не найден startList или finishList!\");\r\n      return;\r\n    }\r\n  \r\n    if (startList === finishList) {\r\n      console.log(\"startList === finishList\");\r\n      const newCards = Array.from(startList.cards);\r\n      const [movedCard] = newCards.splice(source.index, 1);\r\n      newCards.splice(destination.index, 0, movedCard);\r\n  \r\n      const newList = { ...startList, cards: newCards };\r\n      const newData = {\r\n        ...data,\r\n        lists: data.lists.map((list) =>\r\n          String(list.id) === String(newList.id) ? newList : list\r\n        ),\r\n      };\r\n  \r\n      setData(newData);\r\n      return;\r\n    }\r\n  \r\n    console.log(\"Moving between lists\");\r\n    const startCards = Array.from(startList.cards);\r\n    const [movedCard] = startCards.splice(source.index, 1);\r\n  \r\n    const finishCards = Array.from(finishList.cards);\r\n    finishCards.splice(destination.index, 0, movedCard);\r\n  \r\n    const newStartList = { ...startList, cards: startCards };\r\n    const newFinishList = { ...finishList, cards: finishCards };\r\n  \r\n    const newData = {\r\n      ...data,\r\n      lists: data.lists.map((list) => {\r\n        if (String(list.id) === String(newStartList.id)) {\r\n          return newStartList;\r\n        }\r\n        if (String(list.id) === String(newFinishList.id)) {\r\n          return newFinishList;\r\n        }\r\n        return list;\r\n      }),\r\n    };\r\n  \r\n    setData(newData);\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}